{
  "name": "trumpet",
  "version": "1.5.5",
  "description": "parse and transform streaming html using css selectors",
  "main": "index.js",
  "dependencies": {
    "sax": "~0.5.4",
    "ent": "~0.0.5",
    "through": "~2.3.4",
    "duplexer": "~0.1.1",
    "buffers": "~0.1.1",
    "inherits": "~2.0.0"
  },
  "devDependencies": {
    "tap": "~0.4.0",
    "tape": "~1.0.4",
    "concat-stream": "~1.0.0"
  },
  "scripts": {
    "test": "tap test/*.js"
  },
  "repository": {
    "type": "git",
    "url": "http://github.com/substack/node-trumpet.git"
  },
  "keywords": [
    "html",
    "streaming",
    "parser",
    "transform",
    "selectors",
    "css"
  ],
  "author": {
    "name": "James Halliday",
    "email": "mail@substack.net",
    "url": "http://substack.net"
  },
  "license": "MIT",
  "engine": {
    "node": ">=0.4"
  },
  "readme": "# trumpet\n\nparse and transform streaming html using css selectors\n\n[![build status](https://secure.travis-ci.org/substack/node-trumpet.png)](http://travis-ci.org/substack/node-trumpet)\n\n![trumpet](http://substack.net/images/trumpet.png)\n\n# example\n\n## table\n\ninput html:\n\n``` html\n<table>\n  <tbody>blah blah blah</tbody>\n  <tr><td>there</td></tr>\n  <tr><td>it</td></tr>\n  <tr><td>is</td></tr>\n</table>\n```\n\n``` js\nvar trumpet = require('trumpet');\nvar tr = trumpet();\ntr.pipe(process.stdout);\n \nvar ws = tr.select('tbody').createWriteStream();\nws.end('<tr><td>rawr</td></tr>');\n\nvar fs = require('fs');\nfs.createReadStream(__dirname + '/html/table.html').pipe(tr);\n```\n\noutput:\n\n``` html\n<table>\n  <tbody><tr><td>rawr</td></tr></tbody>\n  <tr><td>there</td></tr>\n  <tr><td>it</td></tr>\n  <tr><td>is</td></tr>\n</table>\n```\n\n## read all\n\ninput html:\n\n``` html\n<html>\n  <head>\n    <title>beep</title>\n  </head>\n  <body>\n    <div class=\"a\">¡¡¡</div>\n    <div class=\"b\">\n      <span>tacos</span>\n      <span> y </span>\n      <span>burritos</span>\n    </div>\n    <div class=\"a\">!!!</div>\n  </body>\n</html>\n```\n\n``` js\nvar trumpet = require('trumpet');\nvar tr = trumpet();\n\ntr.selectAll('.b span', function (span) {\n    span.createReadStream().pipe(process.stdout);\n});\n\nvar fs = require('fs');\nfs.createReadStream(__dirname + '/html/read_all.html').pipe(tr);\n```\n\noutput:\n\n``` html\ntacos y burritos\n```\n\n# methods\n\n``` js\nvar trumpet = require('trumpet')\n```\n\n## var tr = trumpet(opts)\n\nCreate a new trumpet stream. This stream is readable and writable.\nPipe an html stream into `tr` and get back a transformed html stream.\n\nParse errors are emitted by `tr` in an `'error'` event.\n\n## var elem = tr.select(selector)\n\nReturn a result object `elem` for the first element matching `selector`.\n\n## tr.selectAll(selector, function (elem) {})\n\nGet a result object `elem` for every element matching `selector`.\n\n## elem.getAttribute(name, cb)\n\nWhen the selector for `elem` matches, query the case-insensitive attribute\ncalled `name` with `cb(value)`.\n\n## elem.setAttribute(name, value)\n\nWhen the selector for `elem` matches, replace the case-insensitive attribute\ncalled `name` with `value`.\n\nIf the attribute doesn't exist, it will be created in the output stream.\n\n## elem.removeAttribute(name)\n\nWhen the selector for `elem` matches, remove the attribute called `name` if it\nexists.\n\n## elem.createReadStream(opts)\n\nCreate a new readable stream with the inner html content under `elem`.\n\nTo use the outer html content instead of the inner, set `opts.outer` to `true`.\n\n## elem.createWriteStream(opts)\n\nCreate a new write stream to replace the inner html content under `elem`.\n\nTo use the outer html content instead of the inner, set `opts.outer` to `true`.\n\n## elem.createStream(opts)\n\nCreate a new readable writable stream that outputs the content under `elem` and\nreplaces the content with the data written to it.\n\nTo use the outer html content instead of the inner, set `opts.outer` to `true`.\n\n## tr.createStream(sel, opts)\n\nShort-hand for `tr.select(sel).createStream(opts)`.\n\n## tr.createReadStream(sel, opts)\n\nShort-hand for `tr.select(sel).createReadStream(opts)`.\n\n## tr.createWriteStream(sel, opts)\n\nShort-hand for `tr.select(sel).createWriteStream(opts)`.\n\n# selector syntax\n\nPresently these [css selectors](http://www.w3.org/TR/CSS2/selector.html) work:\n\n* *\n* E\n* E F\n* E > F\n* E + F\n* E.class\n* E#id\n* E[attr=value]\n* E[attr~=search]\n* E[attr|=prefix]\n\n# install\n\nWith [npm](http://npmjs.org) do:\n\n```\nnpm install trumpet\n```\n\n# license\n\nMIT\n",
  "readmeFilename": "readme.markdown",
  "bugs": {
    "url": "https://github.com/substack/node-trumpet/issues"
  },
  "_id": "trumpet@1.5.5",
  "_from": "trumpet@~1.5.0"
}
