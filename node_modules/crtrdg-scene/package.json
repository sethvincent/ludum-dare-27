{
  "name": "crtrdg-scene",
  "version": "0.0.2",
  "description": "scene module for crtrdg games",
  "main": "index.js",
  "scripts": {
    "test": "beefy test.js:bundle.js --live"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/sethvincent/crtrdg-scene.git"
  },
  "keywords": [
    "games",
    "html",
    "canvas",
    "animation",
    "requestAnimationFrame",
    "game library",
    "scene",
    "crtrdg"
  ],
  "author": {
    "name": "Seth Vincent",
    "email": "sethvincent@gmail.com",
    "url": "http://sethvincent.com"
  },
  "license": "MIT",
  "dependencies": {
    "inherits": "~2.0.0"
  },
  "devDependencies": {
    "crtrdg-gameloop": "~0.0.3",
    "crtrdg-mouse": "~0.0.1"
  },
  "readme": "# crtrdg scene\n> entity module for games\n\n## Goals for crtrdg-scene:\n- A simple interface for handling different levels or screens of a game.\n\nThis is still an overly simple and naive implementation of a scene manager. Not quite ready for real use, but almost.\n\n## Requirements\n- node.js\n- browserify / beefy\n- crtrdg-gameloop (or possibly another method of animating the canvas with requestAnimationFrame that emits `update` and `draw` events)\n\n## Getting started\nInstall node if you haven't already.\n\n### Install browserify and beefy:\n```\nnpm install -g browserify beefy\n```\n\n## Usage:\n### Create an index.html file:\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <title>crtrdg scene test</title>\n</head>\n<body>\n\n<canvas id=\"game\"></canvas>\n\n<script src=\"./bundle.js\"></script>\n</body>\n</html>\n```\n\n### Create a game.js file:\n```\nvar Game = require('crtrdg-gameloop');\nvar Mouse = require('crtrdg-mouse')\nvar SceneManager = require('crtrdg-scene');\n\nvar game = new Game({\n  canvasId: 'game',\n  width: '800',\n  height: '400',\n  backgroundColor: '#ff1f1f',\n});\n\nvar firstScene, secondScene;\ngame.on('update', function(interval){\n  firstScene = sceneManager.get('first scene');\n  console.log(firstScene)\n  secondScene = sceneManager.get('second scene');\n  console.log(secondScene)\n});\n\nvar mouse = new Mouse(game);\n\nmouse.on('click', function(location){\n  if (game.currentScene.name === 'first scene'){\n    sceneManager.set(sceneTwo);\n  } else {\n    sceneManager.set(scene);\n  }\n});\n\nvar sceneManager = new SceneManager({\n  game: game\n});\n\nvar scene = sceneManager.create({\n  name: 'first scene',\n  backgroundColor: '#e1f23f'\n});\n\nscene.on('init', sceneSwitch);\n\nsceneManager.set(scene);\n\nvar sceneTwo = sceneManager.create({\n  name: 'second scene',\n  backgroundColor: '#7def71'\n});\n\nsceneTwo.on('init', sceneSwitch);\n\nfunction setMessage(text){\n  document.getElementById('scene-name').innerHTML = text;\n}\n\nfunction sceneSwitch(){\n  console.log(this.name)\n  setMessage(this.name);\n}\n```\n\n## Purpose of `crtrdg`:\nAlmost every javascript game / animation library I've found bundles things like requestAnimationFrame polyfill, gameloop, entities, abstract drawing methods, keyboard/mouse input, vector math, and more into one entangled library. If I don't like how the library handles just one of those components, I'm stuck with dead library weight, and sometimes it's difficult to replace a library's methods.\n\nSo what if each element of 2d games were broken up into it's own modules / repositories?\n\nWith inspiration from voxel.js, crtrdg is a collection of javascript modules used for developing 2d games.\n\nAs I learned more about node.js, the core events module, and browserify, I realized the ideal api for making simple 2d games could be based on node's events module. So you'll see a lot of crtrdg modules exposing an api that includes `.on('some event', function(){})`, which seems to make a lot of sense for games.\n\n## Other `crtrdg` modules:\n- [crtrdg-gameloop](http://github.com/sethvincent/crtrdg-gameloop)\n- [crtrdg-entity](http://github.com/sethvincent/crtrdg-entity)\n- [crtrdg-keyboard](http://github.com/sethvincent/crtrdg-keyboard)\n- [crtrdg-mouse](http://github.com/sethvincent/crtrdg-mouse)\n\n\n## Contributing\n- Fork this repository.\n- Create a branch for you changes.\n- Include tests if applicable.\n- Add/edit documentation for any changes.\n- Submit a pull request.\n\n## License\nMIT",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/sethvincent/crtrdg-scene/issues"
  },
  "_id": "crtrdg-scene@0.0.2",
  "_from": "crtrdg-scene@"
}
