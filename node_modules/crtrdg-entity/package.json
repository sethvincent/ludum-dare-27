{
  "name": "crtrdg-entity",
  "version": "0.0.8",
  "description": "entity module for crtrdg games",
  "main": "index.js",
  "scripts": {
    "test": "beefy test.js:bundle.js --live"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/sethvincent/crtrdg-entity.git"
  },
  "keywords": [
    "games",
    "html",
    "canvas",
    "animation",
    "requestAnimationFrame",
    "game library",
    "entity"
  ],
  "author": {
    "name": "Seth Vincent",
    "email": "sethvincent@gmail.com",
    "url": "http://sethvincent.com"
  },
  "license": "MIT",
  "dependencies": {
    "aabb-2d": "~0.0.0",
    "inherits": "~2.0.0"
  },
  "devDependencies": {
    "crtrdg-gameloop": "~0.0.1",
    "crtrdg-keyboard": "~0.0.2"
  },
  "readme": "# crtrdg entity\n> entity module for games\n\n## Goals for the crtrdg gameloop:\n- Serve as a simple entity module that other modules can inherit\n- Emits update and draw events.\n\n## Requirements\n- node.js\n- browserify / beefy\n- crtrdg-gameloop (or possibly another method of animating the canvas with requestAnimationFrame that emits `update` and `draw` events)\n\n## Getting started\nInstall node if you haven't already.\n\n### Install browserify and beefy:\n```\nnpm install -g browserify beefy\n```\n\n### Create an index.html file:\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <title>crtrdg gameloop test</title>\n</head>\n<body>\n\n<canvas id=\"game\"></canvas>\n\n<script src=\"./bundle.js\"></script>\n</body>\n</html>\n```\n\n### Create a game.js file:\n```\n// use crtrdg-gameloop for animating to the canvas with requestAnimationFrame.\nvar Game = require('crtrdg-gameloop');\n\n// require crtrdg-entity\nvar Entity = require('crtrdg-entity');\n\n// require the inherits module so we can make Player inherit from Entity.\nvar inherits = require('inherits');\n\n// initialize the game with the canvas id\n// set the width, height, and default background color of the canvas\nvar game = new Game({\n  canvasId: 'game',\n  width: '800',\n  height: '400',\n  backgroundColor: '#ff1f1f'\n});\n\n// make the Player funtion inherit from crtrdg-entity\ninherits(Player, Entity);\n\n// create Player function\nfunction Player(options){\n  this.position = { \n    x: options.position.x, \n    y: options.position.y \n  };\n\n  this.size = {\n    x: options.size.x,\n    y: options.size.y\n  };\n\n  this.color = options.color\n}\n\n// create instance of Player\nvar player = new Player({\n  position: { x: 10, y: 10 },\n  size: { x: 10, y: 10 },\n  color: '#fff'\n});\n\n// add the player to the game\nplayer.addTo(game);\n\n// listen for update event.\n// here you can do things like change position or watch for keyboard/mouse events\nplayer.on('update', function(interval){\n  console.log(this.position);\n});\n\n// listen for draw event.\n// context is the canvas context, so you can draw on the canvas like usual.\nplayer.on('draw', function(context){\n  context.fillStyle = this.color;\n  context.fillRect(this.position.x, this.position.y, this.size.x, this.size.y);\n});\n\n// find an entity with `game.findEntity`, an alias for `Entity.prototype.findEntity`\ngame.findEntity(player, function(exists, entities, index){\n  \n  // returns exists, a boolean,\n  // entities, the full array of entities,\n  // and index, the array index of the entity\n  console.log(exists, entities, index)\n})\n```\n\n## Purpose of `crtrdg`:\nAlmost every javascript game / animation library I've found bundles things like requestAnimationFrame polyfill, gameloop, entities, abstract drawing methods, keyboard/mouse input, vector math, and more into one entangled library. If I don't like how the library handles just one of those components, I'm stuck with dead library weight, and sometimes it's difficult to replace a library's methods.\n\nSo what if each element of 2d games were broken up into it's own modules / repositories?\n\nWith inspiration from voxel.js, crtrdg is a collection of javascript modules used for developing 2d games.\n\nAs I learned more about node.js, the core events module, and browserify, I realized the ideal api for making simple 2d games could be based on node's events module. So you'll see a lot of crtrdg modules exposing an api that includes `.on('some event', function(){})`, which seems to make a lot of sense for games.\n\n## Other `crtrdg` modules:\n- [crtrdg-gameloop](http://github.com/sethvincent/crtrdg-gameloop)\n- [crtrdg-keyboard](http://github.com/sethvincent/crtrdg-keyboard)\n- [crtrdg-mouse](http://github.com/sethvincent/crtrdg-mouse)\n\n\n## Contributing\n- Fork this repository.\n- Create a branch for you changes.\n- Include tests if applicable.\n- Add/edit documentation for any changes.\n- Submit a pull request.\n\n## License\nMIT",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/sethvincent/crtrdg-entity/issues"
  },
  "_id": "crtrdg-entity@0.0.8",
  "_from": "crtrdg-entity@~0.0.1"
}
